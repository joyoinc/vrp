<!DOCTYPE html>
<html>
  <head>
  <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <title><%=typeof title == 'undefined' ? 'VRP Lab ' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <style>
      #ex1Slider { width: 100%; }

      #ex1Slider .slider-selection {
        background: #ccc;
      }
    </style>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.8.0/css/bootstrap-slider.min.css">
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap/bootstrap-theme.css">
    <link rel="stylesheet" href="/styles/bootstrap/bootstrap.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body style="padding-top:70px">
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    <script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.8.0/bootstrap-slider.min.js" ></script>

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/bootstrap/bootstrap.js"></script>
    <!--SCRIPTS END-->

    <% var navTextboxes = []; var navButtons = []; var navLinks=[] %>
    <% include navbar %>

    <div class="container">
      <div class="form-horizontal">
        <div class="form-group">
          <label for="passwd1" class="col-sm-2 control-label">输入新密码</label>
          <div class="col-sm-4">
            <input type="password" id="passwd1" class="form-control ">
          </div>
        </div>
        <div class="form-group">
          <label for="passwd2" class="col-sm-2 control-label">确认新密码</label>
          <div class="col-sm-4">
            <input type="password" id="passwd2" class="form-control ">
          </div>
        </div>
        <div class="form-group">
          <label for="" class="col-sm-2 control-label"></label>
          <div class="col-sm-4">
            <button class="btn btn-primary">重置密码</button>
          </div>
        </div>
      </div>

      <% include footer.ejs %>

  </body>
</html>

<script>
var validate = function() {
  if ($('#passwd1').val().length < 8) {
    alert("密码长度至少8个字符，请重试")
    return false
  }
  if ($('#passwd1').val().search(/[A-Z]/) == -1) {
    alert("密码至少包含大写字母，请重试")
    return false
  }
  if ($('#passwd1').val().search(/[a-z]/) == -1) {
    alert("密码至少包含小写字母，请重试")
    return false
  }
  if ($('#passwd1').val().search(/\d/) == -1) {
    alert("密码至少包含数字，请重试")
    return false
  }
  if ($('#passwd1').val() !== $('#passwd2').val()) {
    alert("密码不一致，请重试")
    return false
  }

  return true
}

$('.btn-primary').click(function(evt) {
  evt.preventDefault();

  if(!validate()) return false

  $.ajax({
    type: 'POST',
    url: '/auth/chg',
    data: JSON.stringify({newSecret: $('#passwd1').val()}),
    dataType: 'json',
    contentType: 'application/json'
    }).done(function(data){
      if(data.result == "ok") {
        alert('Change Success !')
        location.href = "/app"
      } else {
        alert('Change Failed !')
        $('.form-control').val('')
      }
    }).fail(function(data){alert(data)});
});

</script>
